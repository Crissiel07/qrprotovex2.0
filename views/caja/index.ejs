<h1 class="mt-4">Panel de Verificación de Pagos</h1>
<p class="lead mb-4">Bienvenido, <%= user.name %> | <span class="badge badge-info">Caja</span></p>

<div class="row">
  <div class="col-md-12 mb-4">
    <div class="card">
      <div class="card-header bg-primary text-white">
        <h5 class="mb-0">Verificación de Estado de Pagos</h5>
      </div>
      <div class="card-body">
        <div class="row mb-4">
          <div class="col-md-6">
            <div class="input-group">
              <input type="text" class="form-control" placeholder="Buscar estudiante por ID o nombre" id="searchStudent">
              <div class="input-group-append">
                <button class="btn btn-primary" type="button" id="btnSearch"><i class="fas fa-search"></i> Buscar</button>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <select class="form-control" id="filterStatus">
            </select>
          </div>
        </div>
        
        <div class="table-responsive">
          <table class="table table-striped table-hover" id="paymentsTable">
            <thead class="thead-dark">
              <tr>
                <th>ID</th>
                <th>Estudiante</th>
                <th>Inscripción</th>
                <th>Primera Cuota</th>
                <th>Segunda Cuota</th>
                <th>Tercera Cuota</th>
                
              </tr>
            </thead>
            <tbody id="studentsTableBody">
              <% 
              // Definir students como un array vacío si no está definido
              const studentsList = typeof students !== 'undefined' ? students : [];
              if (studentsList.length > 0) { 
              %>
                <% studentsList.forEach(student => { %>
                  <tr>
                    <td><%= student.cedula %></td>
                    <td><%= student.nombres %> <%= student.apellidos %></td>
                    <td>
                      <% if (student.inscripcion) { %>
                        <span class="badge badge-success">Completo</span>
                      <% } else { %>
                        <span class="badge badge-warning">Pendiente</span>
                      <% } %>
                    </td>
                    <td>
                      <% if (student.primeraCuota) { %>
                        <span class="badge badge-success">Completo</span>
                      <% } else { %>
                        <span class="badge badge-warning">Pendiente</span>
                      <% } %>
                    </td>
                    <td>
                      <% if (student.segundaCuota) { %>
                        <span class="badge badge-success">Completo</span>
                      <% } else { %>
                        <span class="badge badge-warning">Pendiente</span>
                      <% } %>
                    </td>
                    <td>
                      <% if (student.terceraCuota) { %>
                        <span class="badge badge-success">Completo</span>
                      <% } else { %>
                        <span class="badge badge-warning">Pendiente</span>
                      <% } %>
                    </td>
                  
                    <td>
                      <button class="btn btn-sm btn-primary realizarPago" data-id="<%= student._id %>" data-nombre="<%= student.nombres %> <%= student.apellidos %>"><i class="fas fa-money-bill"></i> Pagar</button>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="10" class="text-center">No hay estudiantes registrados o cargando datos...</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
        
        <div class="mt-3">
          <nav aria-label="Navegación de páginas">
            <ul class="pagination justify-content-center">
              <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Anterior</a>
              </li>
              <li class="page-item active"><a class="page-link" href="#">1</a></li>
              <li class="page-item"><a class="page-link" href="#">2</a></li>
              <li class="page-item"><a class="page-link" href="#">3</a></li>
              <li class="page-item">
                <a class="page-link" href="#">Siguiente</a>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</div>



<div class="mt-3">
  <a href="/dashboard" class="btn btn-secondary mr-2"><i class="fas fa-arrow-left"></i> Volver al Dashboard</a>
  <a href="/caja/validaciones-qr" class="btn btn-primary mr-2"><i class="fas fa-qrcode"></i> Configurar Validaciones QR</a>
  <button type="button" class="btn btn-danger mr-2" data-toggle="modal" data-target="#confirmarReinicioModal">
    <i class="fas fa-sync-alt"></i> Reiniciar Estados de Pago
  </button>
  <a href="/users/logout" class="btn btn-danger"><i class="fas fa-sign-out-alt"></i> Cerrar Sesión</a>
  
  <!-- Formulario oculto para reiniciar estados -->
  <form id="formReiniciarEstados" action="/caja/reiniciar-estados" method="POST" style="display: none;">
    <!-- No se necesitan campos adicionales -->
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Inicializar el modal de pago
    $('#registrarPagoModal').modal({
      show: false,
      backdrop: 'static',
      keyboard: false
    });
    
    // Configurar búsqueda de estudiantes
    document.getElementById('btnSearch').addEventListener('click', function() {
      const searchTerm = document.getElementById('searchStudent').value;
      if (searchTerm.trim() === '') {
        alert('Por favor ingrese un término de búsqueda');
        return;
      }
      
      // Realizar la búsqueda mediante AJAX
      fetch(`/caja/buscar?query=${encodeURIComponent(searchTerm)}`)
        .then(response => response.json())
        .then(data => {
          actualizarTablaEstudiantes(data.students);
        })
        .catch(error => {
          console.error('Error en la búsqueda:', error);
          alert('Error al buscar estudiantes');
        });
    });
    
    // Configurar filtrado por estado
    document.getElementById('filterStatus').addEventListener('change', function() {
      const filterValue = this.value;
      
      // Realizar el filtrado mediante AJAX
      fetch(`/caja/filtrar?estado=${filterValue}`)
        .then(response => response.json())
        .then(data => {
          actualizarTablaEstudiantes(data.students);
        })
        .catch(error => {
          console.error('Error al filtrar:', error);
          alert('Error al filtrar estudiantes');
        });
    });
    
    // Configurar botones de pago
    const botonesPagar = document.querySelectorAll('.realizarPago');
    botonesPagar.forEach(boton => {
      boton.addEventListener('click', function() {
        const estudianteId = this.getAttribute('data-id');
        const estudianteNombre = this.getAttribute('data-nombre');
        
        // Mostrar el nombre del estudiante en el modal
        document.getElementById('estudianteId').value = estudianteId;
        document.getElementById('estudianteNombre').value = estudianteNombre;
        
        // Cargar los estados actuales del estudiante
        fetch(`/caja/obtener-estados/${estudianteId}`)
          .then(response => response.json())
          .then(data => {
            // Actualizar los checkboxes según el estado actual
            document.getElementById('inscripcionEstado').checked = data.inscripcion || false;
            document.getElementById('primeraCuotaEstado').checked = data.primeraCuota || false;
            document.getElementById('segundaCuotaEstado').checked = data.segundaCuota || false;
            document.getElementById('terceraCuotaEstado').checked = data.terceraCuota || false;
          })
          .catch(error => {
            console.error('Error al obtener estados:', error);
          });
        
        // Mostrar el modal
        $('#registrarPagoModal').modal('show');
      });
    });
    
    // Configurar formulario para enviar datos correctamente
    document.getElementById('formRegistrarPago').addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Recoger los datos del formulario
      const estudiante = document.getElementById('estudianteId').value;
      const estudianteNombre = document.getElementById('estudianteNombre').value;
      
      // Crear objeto con los datos para enviar
      const formData = new URLSearchParams();
      formData.append('estudiante', estudiante);
      
      // Guardar el estado de los checkboxes
      const inscripcion = document.getElementById('inscripcionEstado').checked;
      const primeraCuota = document.getElementById('primeraCuotaEstado').checked;
      const segundaCuota = document.getElementById('segundaCuotaEstado').checked;
      const terceraCuota = document.getElementById('terceraCuotaEstado').checked;
      
      // Agregar estados al formulario
      if (inscripcion) {
        formData.append('inscripcion', 'on');
      }
      
      if (primeraCuota) {
        formData.append('primeraCuota', 'on');
      }
      
      if (segundaCuota) {
        formData.append('segundaCuota', 'on');
      }
      
      if (terceraCuota) {
        formData.append('terceraCuota', 'on');
      }
      
      // Enviar datos usando fetch
      fetch('/caja/actualizar-estados', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Error en la respuesta del servidor');
        }
        return response.text();
      })
      .then(() => {
        // Cerrar el modal
        $('#registrarPagoModal').modal('hide');
        
        // Mostrar mensaje de éxito
        alert('Estados de pago actualizados correctamente');
        
        // Actualizar la fila en la tabla sin recargar la página
        const filas = document.querySelectorAll('#studentsTableBody tr');
        for (let i = 0; i < filas.length; i++) {
          const celdas = filas[i].querySelectorAll('td');
          const nombreCompleto = celdas[1].textContent.trim();
          
          if (nombreCompleto === estudianteNombre) {
            // Actualizar inscripción (celda 2)
            let badge = celdas[2].querySelector('span');
            badge.className = inscripcion ? 'badge badge-success' : 'badge badge-warning';
            badge.textContent = inscripcion ? 'Completo' : 'Pendiente';
            
            // Actualizar primera cuota (celda 3)
            badge = celdas[3].querySelector('span');
            badge.className = primeraCuota ? 'badge badge-success' : 'badge badge-warning';
            badge.textContent = primeraCuota ? 'Completo' : 'Pendiente';
            
            // Actualizar segunda cuota (celda 4)
            badge = celdas[4].querySelector('span');
            badge.className = segundaCuota ? 'badge badge-success' : 'badge badge-warning';
            badge.textContent = segundaCuota ? 'Completo' : 'Pendiente';
            
            // Actualizar tercera cuota (celda 5)
            badge = celdas[5].querySelector('span');
            badge.className = terceraCuota ? 'badge badge-success' : 'badge badge-warning';
            badge.textContent = terceraCuota ? 'Completo' : 'Pendiente';
            
            break;
          }
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error al actualizar los estados de pago');
      });
    });
    
    // Configurar botón Cancelar del modal
    document.querySelector('#registrarPagoModal button.btn-secondary').addEventListener('click', function() {
      $('#registrarPagoModal').modal('hide');
    });
    
    // Función para actualizar la tabla de estudiantes con los resultados
    function actualizarTablaEstudiantes(students) {
      const tableBody = document.getElementById('studentsTableBody');
      tableBody.innerHTML = '';
      
      if (students.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="10" class="text-center">No se encontraron estudiantes</td></tr>';
        return;
      }
      
      students.forEach(student => {
        const row = document.createElement('tr');
        
        // Cédula
        const cedulaCell = document.createElement('td');
        cedulaCell.textContent = student.cedula;
        row.appendChild(cedulaCell);
        
        // Nombre completo
        const nombreCell = document.createElement('td');
        nombreCell.textContent = `${student.nombres} ${student.apellidos}`;
        row.appendChild(nombreCell);
        
        // Inscripción
        const inscripcionCell = document.createElement('td');
        const inscripcionBadge = document.createElement('span');
        inscripcionBadge.className = student.inscripcion ? 'badge badge-success' : 'badge badge-warning';
        inscripcionBadge.textContent = student.inscripcion ? 'Completo' : 'Pendiente';
        inscripcionCell.appendChild(inscripcionBadge);
        row.appendChild(inscripcionCell);
        
        // Primera cuota
        const primeraCuotaCell = document.createElement('td');
        const primeraCuotaBadge = document.createElement('span');
        primeraCuotaBadge.className = student.primeraCuota ? 'badge badge-success' : 'badge badge-warning';
        primeraCuotaBadge.textContent = student.primeraCuota ? 'Completo' : 'Pendiente';
        primeraCuotaCell.appendChild(primeraCuotaBadge);
        row.appendChild(primeraCuotaCell);
        
        // Segunda cuota
        const segundaCuotaCell = document.createElement('td');
        const segundaCuotaBadge = document.createElement('span');
        segundaCuotaBadge.className = student.segundaCuota ? 'badge badge-success' : 'badge badge-warning';
        segundaCuotaBadge.textContent = student.segundaCuota ? 'Completo' : 'Pendiente';
        segundaCuotaCell.appendChild(segundaCuotaBadge);
        row.appendChild(segundaCuotaCell);
        
        // Tercera cuota
        const terceraCuotaCell = document.createElement('td');
        const terceraCuotaBadge = document.createElement('span');
        terceraCuotaBadge.className = student.terceraCuota ? 'badge badge-success' : 'badge badge-warning';
        terceraCuotaBadge.textContent = student.terceraCuota ? 'Completo' : 'Pendiente';
        terceraCuotaCell.appendChild(terceraCuotaBadge);
        row.appendChild(terceraCuotaCell);
        
        // Último pago
        const ultimoPagoCell = document.createElement('td');
        if (student.ultimoPago) {
          ultimoPagoCell.textContent = new Date(student.ultimoPago).toLocaleDateString();
        } else {
          const noRegistrado = document.createElement('span');
          noRegistrado.className = 'text-muted';
          noRegistrado.textContent = 'No registrado';
          ultimoPagoCell.appendChild(noRegistrado);
        }
        row.appendChild(ultimoPagoCell);
        
        // Próximo pago
        const proximoPagoCell = document.createElement('td');
        if (student.proximoPago) {
          proximoPagoCell.textContent = new Date(student.proximoPago).toLocaleDateString();
        } else {
          const noRegistrado = document.createElement('span');
          noRegistrado.className = 'text-muted';
          noRegistrado.textContent = 'No registrado';
          proximoPagoCell.appendChild(noRegistrado);
        }
        row.appendChild(proximoPagoCell);
        
        // Estado de pago
        const estadoCell = document.createElement('td');
        const estadoBadge = document.createElement('span');
        estadoBadge.className = 'badge';
        
        if (student.estadoPago === 'al_dia') {
          estadoBadge.className += ' badge-success';
          estadoBadge.textContent = 'Al día';
        } else if (student.estadoPago === 'vencido') {
          estadoBadge.className += ' badge-danger';
          estadoBadge.textContent = 'Vencido';
        } else {
          estadoBadge.className += ' badge-warning';
          estadoBadge.textContent = 'Pendiente';
        }
        
        estadoCell.appendChild(estadoBadge);
        row.appendChild(estadoCell);
        
        // Acciones
        const accionesCell = document.createElement('td');
        
        // Botón Pagar
        const pagarBtn = document.createElement('button');
        pagarBtn.className = 'btn btn-sm btn-primary realizarPago';
        pagarBtn.setAttribute('data-id', student._id);
        pagarBtn.setAttribute('data-nombre', `${student.nombres} ${student.apellidos}`);
        pagarBtn.innerHTML = '<i class="fas fa-money-bill"></i> Pagar';
        accionesCell.appendChild(pagarBtn);
        
        row.appendChild(accionesCell);
        
        tableBody.appendChild(row);
      });
      
      // Volver a añadir event listeners a los nuevos botones
      configurarBotonesRegistrarPago();
    }
    
    // Configurar botones de registrar pago
    function configurarBotonesRegistrarPago() {
      const botonesRegistrarPago = document.querySelectorAll('.realizarPago');
      botonesRegistrarPago.forEach(boton => {
        boton.addEventListener('click', function() {
          const estudianteId = this.getAttribute('data-id');
          const estudianteNombre = this.getAttribute('data-nombre');
          
          // Mostrar el nombre del estudiante en el modal
          document.getElementById('estudianteId').value = estudianteId;
          document.getElementById('estudianteNombre').value = estudianteNombre;
          
          // Cargar los estados actuales del estudiante
          fetch(`/caja/obtener-estados/${estudianteId}`)
            .then(response => response.json())
            .then(data => {
              // Actualizar los checkboxes según el estado actual
              document.getElementById('inscripcionEstado').checked = data.inscripcion || false;
              document.getElementById('primeraCuotaEstado').checked = data.primeraCuota || false;
              document.getElementById('segundaCuotaEstado').checked = data.segundaCuota || false;
              document.getElementById('terceraCuotaEstado').checked = data.terceraCuota || false;
            })
            .catch(error => {
              console.error('Error al obtener estados:', error);
            });
          
          // Mostrar el modal
          $('#registrarPagoModal').modal('show');
        });
      });
    }
    
    // Inicializar configuración de botones
    configurarBotonesRegistrarPago();
    
    // Agregar el manejador para el botón de reinicio
    document.getElementById('btnConfirmarReinicio').addEventListener('click', function() {
      // Mostrar indicador de carga
      this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
      this.disabled = true;
      
      // Enviar el formulario oculto en lugar de usar fetch
      document.getElementById('formReiniciarEstados').submit();
    });
  });
</script>

<!-- Modal para registrar pago (se implementaría más adelante) -->
<div class="modal fade" id="registrarPagoModal" tabindex="-1" role="dialog" aria-labelledby="registrarPagoModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="registrarPagoModalLabel">Registrar Pago</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="formRegistrarPago" action="/caja/actualizar-estados" method="POST">
          <input type="hidden" id="estudianteId" name="estudiante">
          
          <div class="form-group">
            <label for="estudiante">Estudiante:</label>
            <input type="text" class="form-control" id="estudianteNombre" readonly>
          </div>
          
          <div class="form-group">
            <label>Estado de Pagos:</label>
            <div class="custom-control custom-switch mb-2">
              <input type="checkbox" class="custom-control-input" id="inscripcionEstado" name="inscripcion">
              <label class="custom-control-label" for="inscripcionEstado">Inscripción</label>
            </div>
            <div class="custom-control custom-switch mb-2">
              <input type="checkbox" class="custom-control-input" id="primeraCuotaEstado" name="primeraCuota">
              <label class="custom-control-label" for="primeraCuotaEstado">Primera Cuota</label>
            </div>
            <div class="custom-control custom-switch mb-2">
              <input type="checkbox" class="custom-control-input" id="segundaCuotaEstado" name="segundaCuota">
              <label class="custom-control-label" for="segundaCuotaEstado">Segunda Cuota</label>
            </div>
            <div class="custom-control custom-switch mb-2">
              <input type="checkbox" class="custom-control-input" id="terceraCuotaEstado" name="terceraCuota">
              <label class="custom-control-label" for="terceraCuotaEstado">Tercera Cuota</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
        <button type="submit" form="formRegistrarPago" class="btn btn-primary">Guardar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal de Confirmación para Reiniciar Estados -->
<div class="modal fade" id="confirmarReinicioModal" tabindex="-1" role="dialog" aria-labelledby="confirmarReinicioModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="confirmarReinicioModalLabel"><i class="fas fa-exclamation-triangle"></i> Confirmar Reinicio de Estados</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning">
          <strong>¡ADVERTENCIA!</strong> Esta acción reiniciará todos los estados de pago de todos los estudiantes a "Pendiente".
        </div>
        <p>Se establecerán a "false" los siguientes campos para <strong>todos</strong> los estudiantes:</p>
        <ul>
          <li>Inscripción</li>
          <li>Primera Cuota</li>
          <li>Segunda Cuota</li>
          <li>Tercera Cuota</li>
        </ul>
        <p class="text-danger"><strong>Esta acción no se puede deshacer.</strong> ¿Está seguro que desea continuar?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
        <button type="button" id="btnConfirmarReinicio" class="btn btn-danger">Confirmar Reinicio</button>
      </div>
    </div>
  </div>
</div>
